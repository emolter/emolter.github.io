<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2021-12-01T01:23:24+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Ned Molter</title><subtitle>Edward M. Molter, Ned Molter, personal website, not sure where this goes</subtitle><author><name>Edward M. (Ned) Molter</name></author><entry><title type="html">Making this website part II</title><link href="http://0.0.0.0:4000/tutorials/website-build-ii/" rel="alternate" type="text/html" title="Making this website part II" /><published>2021-11-30T00:00:00+00:00</published><updated>2021-11-30T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/website-build-ii</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/website-build-ii/">&lt;p&gt;This is part two of my website build using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; with the &lt;a href=&quot;https://github.com/mmistakes&quot;&gt;Minimal Mistakes&lt;/a&gt; template and hosted by Github Pages. In the &lt;a href=&quot;http://0.0.0.0:4000/tutorials/website-build&quot;&gt;previous edition&lt;/a&gt; I was able to get something reasonable up and running using the Minimal Mistakes &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter/generate&quot;&gt;quickstart&lt;/a&gt;. The goals here are to (1) use Docker to make a local copy of the website so I don’t have to git push every time I want to test a change, and (2) to change some Minimal Mistakes defaults to personalize the site’s look. The repo that underlies the website is &lt;a href=&quot;https://github.com/emolter/emolter.github.io&quot;&gt;here&lt;/a&gt;. In this post I’m basically following Katerina Bosko’s &lt;a href=&quot;https://www.cross-validated.com/Personal-website-with-Minimal-Mistakes-Jekyll-Theme-HOWTO-Part-I/&quot;&gt;very nice tutorial&lt;/a&gt; parts I and II, with the twist that I’ll try to make as few changes as possible from the quickstart site.&lt;/p&gt;

&lt;h1 id=&quot;locally-serving-the-website-using-docker&quot;&gt;Locally serving the website using Docker&lt;/h1&gt;

&lt;p&gt;A &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container is used to run the virtual environment where the local version of the website lives. Installing Docker was super easy: I just downloaded the disk image and dragged it to the Applications folder, and the command-line tools worked automagically (&lt;code&gt;which docker&lt;/code&gt; pointed to the correct path with no extra steps needed).  Going through the Docker tutorial was helpful. One lesson was that if you try to initialize a container on a port that’s in use, the container will fail to run (of course), but Docker will still allocate a container name and ID that must be deleted before remaking it. You can see a list of containers with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker ps -aq&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and remove all of them with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker rm -f $(docker ps -aq)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once Docker was installed, I followed Katerina Bosko’s tutorial Part I exactly, replacing instances of &lt;code&gt;/usr/src/app&lt;/code&gt; with the path to the directory where my site sits (e.g. &lt;code&gt;/Users/emolter/emolter.github.io/&lt;/code&gt;). Since I was starting with an already-functional website based on the quickstart instead of with a clone of the full Minimal Mistakes site, I also had to copy &lt;code&gt;minimal-mistakes-jekyll.gemspec&lt;/code&gt; into the directory to make everything work.&lt;/p&gt;

&lt;p&gt;As advertised, I can now instantly see any changes I make to the site upon refreshing &lt;code&gt;http://0.0.0.0:4000/&lt;/code&gt;. To make changes to any of the .yml files, it’s necessary to rerun the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker build -t personal-website .
docker run --volume=&quot;$PWD:/Users/emolter/emolter.github.io&quot; -p 4000:4000 -t personal-website&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;styling-on-em&quot;&gt;Styling on em&lt;/h1&gt;

&lt;p&gt;The Minimal Mistakes quickstart is nice because it makes a pared-down version of the site that does not include any of the style files, which makes it user-friendly for a newbie like me. I’m not quite sure how this works, but apparently just setting &lt;code&gt;remote_theme: mmistakes/minimal-mistakes&lt;/code&gt; in your &lt;code&gt;config.yml&lt;/code&gt; file means Jekyll/Github Pages will find all the style files remotely. But now I want to make changes to that remote theme.  Importantly, if style files are included inside a site with a remote theme, then Jekyll will look inside the site first and override the remote theme defaults. So making changes is as simple as copying the relevant style file from the Minimal Mistakes base repository into your site and then changing whatever you want. Just make sure to preserve the directory structure (e.g., use &lt;code&gt;_sass/minimal-mistakes/_sidebar.scss&lt;/code&gt; to change the sidebar.)&lt;/p&gt;

&lt;p&gt;I liked the way the sidebar looks on Katerina Bosko’s site with the larger picture, so I did indeed copy over &lt;code&gt;_sass/minimal-mistakes/_sidebar.scss&lt;/code&gt;. For anything within sass, I also learned it is necessary to copy &lt;code&gt;_sass/minimal_mistakes.scss&lt;/code&gt; or else your changes won’t be seen.&lt;/p&gt;

&lt;p&gt;I didn’t make any more changes because the defaults look good enough for me, but the proof-of-concept is there and any changes I want to make later should be easy.&lt;/p&gt;

&lt;h1 id=&quot;pushing-changes-to-github&quot;&gt;Pushing changes to GitHub&lt;/h1&gt;

&lt;p&gt;I was initially concerned that all these changes to the GitHub repo would mess up the way the real site at &lt;code&gt;emolter.github.io&lt;/code&gt; behaves. Apparently running the naive&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;git add -A
git commit -m &quot;whatever&quot;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;doesn’t break anything, and correctly updates content within existing pages as well as including new blog posts or pages, but does not incorporate the style changes I made.&lt;/p&gt;

&lt;p&gt;The solution is simply to remove &lt;code&gt;_site&lt;/code&gt; from &lt;code&gt;.gitignore&lt;/code&gt;, then do the usual git push.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="website" /><category term="jekyll" /><summary type="html">This is part two of my website build using Jekyll with the Minimal Mistakes template and hosted by Github Pages. In the previous edition I was able to get something reasonable up and running using the Minimal Mistakes quickstart. The goals here are to (1) use Docker to make a local copy of the website so I don’t have to git push every time I want to test a change, and (2) to change some Minimal Mistakes defaults to personalize the site’s look. The repo that underlies the website is here. In this post I’m basically following Katerina Bosko’s very nice tutorial parts I and II, with the twist that I’ll try to make as few changes as possible from the quickstart site. Locally serving the website using Docker A Docker container is used to run the virtual environment where the local version of the website lives. Installing Docker was super easy: I just downloaded the disk image and dragged it to the Applications folder, and the command-line tools worked automagically (which docker pointed to the correct path with no extra steps needed). Going through the Docker tutorial was helpful. One lesson was that if you try to initialize a container on a port that’s in use, the container will fail to run (of course), but Docker will still allocate a container name and ID that must be deleted before remaking it. You can see a list of containers with docker ps -aq and remove all of them with docker rm -f $(docker ps -aq) Once Docker was installed, I followed Katerina Bosko’s tutorial Part I exactly, replacing instances of /usr/src/app with the path to the directory where my site sits (e.g. /Users/emolter/emolter.github.io/). Since I was starting with an already-functional website based on the quickstart instead of with a clone of the full Minimal Mistakes site, I also had to copy minimal-mistakes-jekyll.gemspec into the directory to make everything work. As advertised, I can now instantly see any changes I make to the site upon refreshing http://0.0.0.0:4000/. To make changes to any of the .yml files, it’s necessary to rerun the following lines: docker build -t personal-website . docker run --volume=&quot;$PWD:/Users/emolter/emolter.github.io&quot; -p 4000:4000 -t personal-website</summary></entry><entry><title type="html">Making this website</title><link href="http://0.0.0.0:4000/tutorials/website-build/" rel="alternate" type="text/html" title="Making this website" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/website-build</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/website-build/">&lt;p&gt;I here document how I made this website and what I learned. I hope this post helps someone else make their github.io site for the first time, or just reminds me in a few months what I did.  Thanks to Murti for pointing out that I can host a website on github.io this way. In order to have it at username.github.io you just need to name the repo precisely “username.github.io”. Making my site here instead of at a berkeley.edu address seems like the best decision for someone who might change research positions a few times in the next few years. The repo that underlies the website is &lt;a href=&quot;https://github.com/emolter/emolter.github.io&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Update 11/30: I’d highly recommend setting up a Docker environment to host a local copy of the site as it makes everything easier. You can learn how in &lt;a href=&quot;http://0.0.0.0:4000/tutorials/website-build-ii&quot;&gt;Part II of this tutorial&lt;/a&gt;. Although it should have been in Part I, I didn’t figure out how to do it until just now.&lt;/p&gt;

&lt;h1 id=&quot;software-prerequisites&quot;&gt;Software prerequisites&lt;/h1&gt;

&lt;p&gt;GitHub supports building websites using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll was easy to install with just&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;once I had installed the appropriate Ruby versions. Ruby was the hard part, as it seems pretty annoying to install without homebrew and the version on my Mac was outdated (need at least 2.5). I used the rbenv ruby environment handler, and had to install it by hand via &lt;a href=&quot;https://github.com/rbenv/rbenv#basic-github-checkout&quot;&gt;these instructions&lt;/a&gt; because I don’t use homebrew. Once that was done, I was able to just run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;the-minimal-mistakes-template&quot;&gt;The Minimal Mistakes template&lt;/h1&gt;

&lt;p&gt;Now I needed a Jekyll template since the default from GitHub Pages seemed a bit simplistic. &lt;a href=&quot;https://github.com/mmistakes&quot;&gt;Minimal Mistakes&lt;/a&gt; came through bigtime. I spent a long time trying to use a different free Jekyll template, but its homepage was kind of dumb-looking and I couldn’t figure out easily how to change it. The fact that Minimal Mistakes had a &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter/generate&quot;&gt;quickstart&lt;/a&gt; that made the GitHub repo for me was pretty awesome. All I did was take that, git clone it to my local machine, and start making changes! Then I just git commit as normal. It takes a few minutes for the site to update after the GitHub repo updates. It looks easy to change any layouts or settings by simply copying relevant layout or style files from the main Minimal Mistakes repo into my local repo (the local repo’s version overrides the defaults), but I didn’t try that yet.&lt;/p&gt;

&lt;p&gt;I initially wanted to make use of the categorization and tagging functionality to separate research, teaching, outreach, etc., and just make one post per topic.  But I couldn’t easily figure out how to make Research, Teaching, and Outreach into site headers as well as blog categories.  I’m sure there is a way to do this, but I found it easier to just remove the fancy, auto-sorting Categories and Tags pages and make new pages with the “simple” layout.  I guess the outcome is fine - this isn’t really a blog anyway - but the search function is pretty limited as it seems to only see blog posts.&lt;/p&gt;

&lt;p&gt;I wanted to change the homepage to be something other than the blog posts, since this is mainly a professional website. Minimal Mistakes already had that solved, too: they provide a splash page layout [here]{https://raw.githubusercontent.com/mmistakes/minimal-mistakes/master/docs/_pages/home.md}. To use this, I put it in _pages/home.md, then deleted index.html in the root directory. I really enjoy that the homepage is primarily photos, but one could also make a home.md with the “simple” layout or whatever.&lt;/p&gt;

&lt;h1 id=&quot;font-awesome&quot;&gt;Font Awesome&lt;/h1&gt;

&lt;p&gt;I didn’t know this existed until there was an example in Minimal Mistakes, but &lt;a href=&quot;https://fontawesome.com/v5.15/icons?d=gallery&amp;amp;p=2&amp;amp;m=free&quot;&gt;Font Awesome&lt;/a&gt; is really helpful for making little thumbnails. You should see where these go in the _config.yml file; the base Minimal Mistakes template is already using them. It is important to remember that there are several subclasses, including business (fab) and solid (fas), e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;icon: &quot;fas fa-fw fa-envelope&quot;
icon: &quot;fab fa-fw fa-orcid&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It doesn’t look like ADS has a Font Awesome icon, so I just picked a random one.  But these really go a long way toward making things look professional.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="website" /><category term="jekyll" /><summary type="html">I here document how I made this website and what I learned. I hope this post helps someone else make their github.io site for the first time, or just reminds me in a few months what I did. Thanks to Murti for pointing out that I can host a website on github.io this way. In order to have it at username.github.io you just need to name the repo precisely “username.github.io”. Making my site here instead of at a berkeley.edu address seems like the best decision for someone who might change research positions a few times in the next few years. The repo that underlies the website is here. Update 11/30: I’d highly recommend setting up a Docker environment to host a local copy of the site as it makes everything easier. You can learn how in Part II of this tutorial. Although it should have been in Part I, I didn’t figure out how to do it until just now. Software prerequisites GitHub supports building websites using Jekyll. Jekyll was easy to install with just gem install jekyll bundler once I had installed the appropriate Ruby versions. Ruby was the hard part, as it seems pretty annoying to install without homebrew and the version on my Mac was outdated (need at least 2.5). I used the rbenv ruby environment handler, and had to install it by hand via these instructions because I don’t use homebrew. Once that was done, I was able to just run rbenv install 2.7.4</summary></entry></feed>