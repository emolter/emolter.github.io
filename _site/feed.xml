<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-12-30T20:10:46+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Ned Molter</title><subtitle>Edward M. Molter, Ned Molter, personal website</subtitle><author><name>Edward M. (Ned) Molter</name></author><entry><title type="html">Custom color scheme, design, and logo of readthedocs page</title><link href="http://0.0.0.0:4000/tutorials/readthedocs-customization/" rel="alternate" type="text/html" title="Custom color scheme, design, and logo of readthedocs page" /><published>2023-12-20T00:00:00+00:00</published><updated>2023-12-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/readthedocs-customization</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/readthedocs-customization/">&lt;p&gt;This very short tutorial documents how I gave the &lt;a href=&quot;https://pylanetary.readthedocs.io/en/latest/&quot;&gt;pylanetary project’s readthedocs page&lt;/a&gt; a custom logo and layout. The logo was designed by Jacob Waliszewski at &lt;a href=&quot;https://www.jwdesignco.com/&quot;&gt;jwdesignco&lt;/a&gt;, so massive shout-out to him. It looks fantastic!&lt;/p&gt;

&lt;p&gt;Pylanetary uses a &lt;code&gt;pyproject.toml&lt;/code&gt; file to handle its packaging in a way that’s compatible with Python 3.12, and relies on &lt;a href=&quot;https://sphinx-pyproject.readthedocs.io/en/latest/&quot;&gt;sphinx-pyproject&lt;/a&gt; so that most of the options that would normally go in sphinx’s &lt;code&gt;conf.py&lt;/code&gt; go inside &lt;code&gt;pyproject.toml&lt;/code&gt; under &lt;code&gt;[tool.sphinx-pyproject]&lt;/code&gt;. Your mileage may vary if you are using some other setup.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Add a logo in the top-left corner &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This was dead simple, since sphinx has an explicit option for this. Simply:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt; Put a .png of the logo into the &lt;code&gt;docs/&lt;/code&gt; folder, NOT &lt;code&gt;docs/_static&lt;/code&gt;. The file will be copied to static during the build. &lt;/li&gt;
  &lt;li&gt; Ensure the lines &lt;code&gt;html_static_path = ['_static']&lt;/code&gt; and &lt;code&gt;html_logo = &quot;logo.png&quot;&lt;/code&gt; are both in &lt;code&gt;pyproject.toml&lt;/code&gt; under &lt;code&gt;[tool.sphinx-pyproject]&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; To test, just &lt;code&gt;make clean html&lt;/code&gt; from within the docs folder as usual. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt; Change the layout &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I didn’t like any of the native sphinx site designs - either they look super outdated, or too many other packages already use it. Thankfully, the open-source community has created tons of options, which are compiled &lt;a href=&quot;https://sphinx-themes.org/#themes&quot;&gt;here&lt;/a&gt;. I chose &lt;a href=&quot;https://github.com/pradyunsg/furo&quot;&gt;Furo&lt;/a&gt;. It was super easy to implement, I simply ran &lt;code&gt;pip install furo&lt;/code&gt;, added &lt;code&gt;furo&lt;/code&gt; to my &lt;code&gt;docs/requirements.txt&lt;/code&gt; file, and then set &lt;code&gt;html_theme = &quot;furo&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Change the color scheme &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is done by setting the &lt;code&gt;html_theme_options&lt;/code&gt; for sphinx. The allowed options appear to depend a bit on the choice of theme. For Furo, this was the syntax:
&lt;code&gt;html_theme_options = {&quot;light_css_variables&quot; = {&quot;color-brand-primary&quot; = &quot;#002f87&quot;}, &quot;dark_css_variables&quot; = {&quot;color-brand-primary&quot; = &quot;#00a7e1&quot;}}&lt;/code&gt;
I am ashamed to admit how long it took me to figure out the syntax for this dictionary in &lt;code&gt;pyproject.toml&lt;/code&gt;. it seemed to need all of it on one line. Thanks again to Jacob for sending me the hex colors so we could have a consistent color scheme.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Sphinx Copy Button &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I browsed the Recommendations page given in the Furo docs, and ended up adding just one: the &lt;a href=&quot;https://github.com/executablebooks/sphinx-copybutton&quot;&gt;code copier button&lt;/a&gt;. This integrated easily into both in-line code blocks in the .rst files and the tutorials written in Jupyter notebook and generated by nbsphinx. It was also super easy to implement, I simply ran &lt;code&gt;pip install sphinx-copybutton&lt;/code&gt;, added &lt;code&gt;&quot;sphinx_copybutton&quot;&lt;/code&gt; to the list of sphinx extensions, and added it to my &lt;code&gt;docs/requirements.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Testing the build &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Testing the docs build as part of the integration tests that run on GitHub upon submitting a PR is as simple as clicking an option box in the project’s readthedocs settings. I learned this as part of this project. When you do so, the full build will be available from the project’s readthedocs build page, e.g., &lt;a href=&quot;https://readthedocs.org/projects/pylanetary/builds/&quot;&gt;https://readthedocs.org/projects/pylanetary/builds/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="readthedocs" /><category term="software" /><category term="css" /><summary type="html">This very short tutorial documents how I gave the pylanetary project’s readthedocs page a custom logo and layout. The logo was designed by Jacob Waliszewski at jwdesignco, so massive shout-out to him. It looks fantastic! Pylanetary uses a pyproject.toml file to handle its packaging in a way that’s compatible with Python 3.12, and relies on sphinx-pyproject so that most of the options that would normally go in sphinx’s conf.py go inside pyproject.toml under [tool.sphinx-pyproject]. Your mileage may vary if you are using some other setup. Add a logo in the top-left corner This was dead simple, since sphinx has an explicit option for this. Simply: Put a .png of the logo into the docs/ folder, NOT docs/_static. The file will be copied to static during the build. Ensure the lines html_static_path = ['_static'] and html_logo = &quot;logo.png&quot; are both in pyproject.toml under [tool.sphinx-pyproject] To test, just make clean html from within the docs folder as usual. Change the layout I didn’t like any of the native sphinx site designs - either they look super outdated, or too many other packages already use it. Thankfully, the open-source community has created tons of options, which are compiled here. I chose Furo. It was super easy to implement, I simply ran pip install furo, added furo to my docs/requirements.txt file, and then set html_theme = &quot;furo&quot;. Change the color scheme This is done by setting the html_theme_options for sphinx. The allowed options appear to depend a bit on the choice of theme. For Furo, this was the syntax: html_theme_options = {&quot;light_css_variables&quot; = {&quot;color-brand-primary&quot; = &quot;#002f87&quot;}, &quot;dark_css_variables&quot; = {&quot;color-brand-primary&quot; = &quot;#00a7e1&quot;}} I am ashamed to admit how long it took me to figure out the syntax for this dictionary in pyproject.toml. it seemed to need all of it on one line. Thanks again to Jacob for sending me the hex colors so we could have a consistent color scheme. Sphinx Copy Button I browsed the Recommendations page given in the Furo docs, and ended up adding just one: the code copier button. This integrated easily into both in-line code blocks in the .rst files and the tutorials written in Jupyter notebook and generated by nbsphinx. It was also super easy to implement, I simply ran pip install sphinx-copybutton, added &quot;sphinx_copybutton&quot; to the list of sphinx extensions, and added it to my docs/requirements.txt file. Testing the build Testing the docs build as part of the integration tests that run on GitHub upon submitting a PR is as simple as clicking an option box in the project’s readthedocs settings. I learned this as part of this project. When you do so, the full build will be available from the project’s readthedocs build page, e.g., https://readthedocs.org/projects/pylanetary/builds/.</summary></entry><entry><title type="html">.Astronomy 12 Debrief</title><link href="http://0.0.0.0:4000/professional%20development/personal/dotAstronomy12/" rel="alternate" type="text/html" title=".Astronomy 12 Debrief" /><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>http://0.0.0.0:4000/professional%20development/personal/dotAstronomy12</id><content type="html" xml:base="http://0.0.0.0:4000/professional%20development/personal/dotAstronomy12/">&lt;p&gt;de-briefer de-better, har, har.&lt;/p&gt;

&lt;h1 id=&quot;i-contributed&quot;&gt;I Contributed!&lt;/h1&gt;

&lt;p&gt;In contrast to the Astronomical Software Development conference last year, which was my first unconference, this time around at .Astronomy 12 I knew the drill and felt empowered to contribute some stuff!&lt;/p&gt;

&lt;h2 id=&quot;first-astropy-contribution-hack-day-project&quot;&gt;First Astropy Contribution (Hack Day Project)&lt;/h2&gt;

&lt;p&gt;I pitched a hack day project to make our first contribution to Astropy, which I was later told is a classic .Astronomy hack day activity. Eilat Glikman turned this nebulous idea concrete by pointing out that Astropy lacks the obviously-useful and ubiquitous functionality to overlay a WCS compass onto images. We agreed that this was a slam-dunk for astropy.visualization. Our team was Lindsey Gordon, Sam Vaughan, Eilat Glikman, Thomas Vandal, and me, and we had some discussions with Ella Roselli, Brett Morris, and Peter Scicluna. After much discussion of the best way to determine where sky North was in any given WCS, we were able to submit the initial pull request by the end of one long day. Happily, this feature will be added to the next Astropy release! &lt;a href=&quot;https://github.com/astropy/astropy/pull/15434&quot;&gt;Link to pull request&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;showyourwork-tutorial-unconference-session&quot;&gt;Showyourwork! Tutorial Unconference Session&lt;/h2&gt;

&lt;p&gt;The incredible &lt;a href=&quot;https://show-your.work/en/latest/&quot;&gt;showyourwork!&lt;/a&gt; workflow for open-sourcing an entire scientific publication, built by Rodrigo Luger (and others), was the coolest thing I took away from the last unconference. This year, I proposed to facilitate an unconference session about it, and it got voted for! We combined it with a &lt;a href=&quot;https://snakemake.readthedocs.io/en/stable/&quot;&gt;snakemake&lt;/a&gt; tutorial facilitated by Sam Vaughan. The session seemed successful, mostly because .Astronomy participants are a super engaged audience.&lt;/p&gt;

&lt;h2 id=&quot;extra-short-latex-references&quot;&gt;Extra-Short LaTeX References&lt;/h2&gt;

&lt;p&gt;This unconference coincided with my first postdoc application deadlines, and I had run into a problem while finishing those up: I couldn’t find a LaTeX .bst style for hyper-condensed references. These are necessary whenever there is a page limit for a proposal, and any scientist who’s written, e.g., a JWST proposal knows this pain (why bibliographies are still included in page limits is beyond me). During the second hack day, Yasmeen Ayali and I drafted a very basic ultra-condensed biliography bst file. We had no idea what we were doing coding that, but were able to Google around enough to hack a minimal example together. If you (or future me) runs across this post, knows a bit more what they are doing writing hardcore LaTeX, and wants to improve it, Yasmeen and I would be extremely thankful! &lt;a href=&quot;https://github.com/emolter/xtrashort-refs&quot;&gt;Here is the link.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;i-learned-tips--tricks&quot;&gt;I Learned! (Tips &amp;amp; Tricks)&lt;/h1&gt;

&lt;h2 id=&quot;vscode-and-extensions&quot;&gt;VSCode and Extensions&lt;/h2&gt;

&lt;p&gt;Before this workshop, my IDE of choice had been TextMate, a free alternative to SublimeText. I say choice, but really I Googled “free sublimetext” in my first year of grad school and learned how to use TextMate, which is pretty basic but not bad overall. This workshop opened my eyes to the power of VSCode, though - wow! Exploring all the extensions, plus GitHub Copilot, have led to a dramatic overhaul in the way I write software.&lt;/p&gt;

&lt;h2 id=&quot;copier&quot;&gt;Copier&lt;/h2&gt;

&lt;p&gt;I learned about a new way to create new packages called &lt;a href=&quot;https://copier.readthedocs.io/en/stable/&quot;&gt;copier&lt;/a&gt;. It looked like this tool would make packaging my Python code much, much easier! I’m looking forward to trying it.&lt;/p&gt;

&lt;h2 id=&quot;one-liners&quot;&gt;One-liners&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git add -U&lt;/code&gt; will track all edited documents, but will not start tracking new/untracked documents&lt;/p&gt;

&lt;h1 id=&quot;i-had-fun&quot;&gt;I Had Fun!&lt;/h1&gt;

&lt;p&gt;I met (or re-met) tons of amazing people! Here’s a photo of us presenting our Hack Day project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://0.0.0.0:4000/assets/images/dotAstronomy.jpg&quot; alt=&quot;Hack Day&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Professional Development" /><category term="Personal" /><category term="conferences" /><category term="software" /><category term="personal" /><summary type="html">de-briefer de-better, har, har. I Contributed! In contrast to the Astronomical Software Development conference last year, which was my first unconference, this time around at .Astronomy 12 I knew the drill and felt empowered to contribute some stuff! First Astropy Contribution (Hack Day Project) I pitched a hack day project to make our first contribution to Astropy, which I was later told is a classic .Astronomy hack day activity. Eilat Glikman turned this nebulous idea concrete by pointing out that Astropy lacks the obviously-useful and ubiquitous functionality to overlay a WCS compass onto images. We agreed that this was a slam-dunk for astropy.visualization. Our team was Lindsey Gordon, Sam Vaughan, Eilat Glikman, Thomas Vandal, and me, and we had some discussions with Ella Roselli, Brett Morris, and Peter Scicluna. After much discussion of the best way to determine where sky North was in any given WCS, we were able to submit the initial pull request by the end of one long day. Happily, this feature will be added to the next Astropy release! Link to pull request Showyourwork! Tutorial Unconference Session The incredible showyourwork! workflow for open-sourcing an entire scientific publication, built by Rodrigo Luger (and others), was the coolest thing I took away from the last unconference. This year, I proposed to facilitate an unconference session about it, and it got voted for! We combined it with a snakemake tutorial facilitated by Sam Vaughan. The session seemed successful, mostly because .Astronomy participants are a super engaged audience. Extra-Short LaTeX References This unconference coincided with my first postdoc application deadlines, and I had run into a problem while finishing those up: I couldn’t find a LaTeX .bst style for hyper-condensed references. These are necessary whenever there is a page limit for a proposal, and any scientist who’s written, e.g., a JWST proposal knows this pain (why bibliographies are still included in page limits is beyond me). During the second hack day, Yasmeen Ayali and I drafted a very basic ultra-condensed biliography bst file. We had no idea what we were doing coding that, but were able to Google around enough to hack a minimal example together. If you (or future me) runs across this post, knows a bit more what they are doing writing hardcore LaTeX, and wants to improve it, Yasmeen and I would be extremely thankful! Here is the link. I Learned! (Tips &amp;amp; Tricks) VSCode and Extensions Before this workshop, my IDE of choice had been TextMate, a free alternative to SublimeText. I say choice, but really I Googled “free sublimetext” in my first year of grad school and learned how to use TextMate, which is pretty basic but not bad overall. This workshop opened my eyes to the power of VSCode, though - wow! Exploring all the extensions, plus GitHub Copilot, have led to a dramatic overhaul in the way I write software. Copier I learned about a new way to create new packages called copier. It looked like this tool would make packaging my Python code much, much easier! I’m looking forward to trying it. One-liners git add -U will track all edited documents, but will not start tracking new/untracked documents I Had Fun! I met (or re-met) tons of amazing people! Here’s a photo of us presenting our Hack Day project:</summary></entry><entry><title type="html">UC Berkeley astronomy/EPS thesis with Overleaf</title><link href="http://0.0.0.0:4000/tutorials/ucb-thesis-latex/" rel="alternate" type="text/html" title="UC Berkeley astronomy/EPS thesis with Overleaf" /><published>2022-05-30T00:00:00+00:00</published><updated>2022-05-30T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/ucb-thesis-latex</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/ucb-thesis-latex/">&lt;p&gt;This short tutorial documents how I modified an awesome UCB thesis &lt;a href=&quot;https://www.overleaf.com/latex/templates/uc-berkeley-thesis-template/mfzmtxfqvtxx&quot;&gt;Overleaf template&lt;/a&gt; to build my own dissertation.  I am not including my own Overleaf document publicly because formatting guidelines from the Grad Div might change over time, and I have no interest in maintaining my own template. But feel free to get in touch and I’ll send it to you.&lt;/p&gt;

&lt;p&gt;The Berkeley Grad Div’s page on &lt;a href=&quot;https://grad.berkeley.edu/academic-progress/doctoral/dissertation/#formatting-your-manuscript&quot;&gt;Formatting your Thesis&lt;/a&gt; warns, &lt;i&gt;“The most common mistake is following a fellow (or previous) student’s example.”&lt;/i&gt; This is horrendous advice, and will lead to every student wasting time dealing with nitpicky formatting guidelines.  Thank goodness that LaTex exists, and in particular that Paul Vojta (math professor - never met him) maintains a ucbthesis.cls class file and &lt;a href=&quot;https://www.overleaf.com/latex/templates/uc-berkeley-thesis-template/mfzmtxfqvtxx&quot;&gt;Overleaf template&lt;/a&gt;.  So I used that as my starting point. If you work for the Grad Div and somehow happen to see this, please get in touch! It would be awesome if y’all would maintain a good LaTex template for a science thesis, and I’d be happy to advise.&lt;/p&gt;

&lt;p&gt;I needed to insert astronomy and earth science publications that were written in LaTex but used classfiles from AAS, Icarus, and GRL, and lots of the LaTex commands I used in those publications did not exist in ucbthesis.cls. I added &lt;code&gt;\usepackage{amsmath}&lt;/code&gt; and &lt;code&gt;\usepackage{amssymb}&lt;/code&gt;, but there were still many commands missing, e.g. arcseconds as &lt;code&gt;\arcsec&lt;/code&gt; and journal name shortcuts like &lt;code&gt;\grl&lt;/code&gt;. For those, I used &lt;a href=&quot;https://sites.astro.caltech.edu/observatories/coo/solicit/2022B/latexdefs.tex&quot;&gt;latexdefs.tex&lt;/a&gt; (link will download!) from some Caltech Astronomy site (unknown author), and put &lt;code&gt;\include{latexdefs}&lt;/code&gt; into the preamble of thesis.tex.  I changed the way Biblatex was handling citations, too; I used &lt;code&gt; \usepackage[style=authoryear-comp, backend=biber, uniquename=false, uniquelist=true, maxcitenames=1]{biblatex} &lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I then implemented the following steps to remove/replace formatting from my other publications and convert them into chapters:&lt;/p&gt;

&lt;ul&gt;	
  &lt;li&gt; make a new .tex file for the chapter, and copy everything in there &lt;/li&gt;
  &lt;li&gt; add the chapter name to the list of &lt;code&gt;\include{}&lt;/code&gt; calls in thesis.tex &lt;/li&gt;
  &lt;li&gt; remove all calls to begin and end document, remove package imports &lt;/li&gt;
  &lt;li&gt; comment out all authors and affiliations &lt;/li&gt;
  &lt;li&gt; change &lt;code&gt;\title{}&lt;/code&gt; to &lt;code&gt;\chapter{}&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; remove calls to &lt;code&gt;\abstract{}&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; copy-paste all references into the references.bib, then delete call to bibliography within chapter &lt;/li&gt; 
  &lt;li&gt; change citations: &lt;code&gt;\citet{}&lt;/code&gt; becomes &lt;code&gt;\textcite{}&lt;/code&gt;, and &lt;code&gt;\citep&lt;/code&gt; becomes &lt;code&gt;\parencite[][]{}&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; import all figures into the Figures directory &lt;/li&gt;
  &lt;li&gt; change all the file paths in calls to \includegraphics to point to Figures directory &lt;/li&gt;
  &lt;li&gt; fix tables - no fancytable allowed, but can import other packages. see example tables &lt;/li&gt;
    &lt;ul&gt; 
  	  &lt;li&gt; &lt;code&gt;\usepackage{longtable}&lt;/code&gt; for multi-page tables &lt;/li&gt;
	  &lt;li&gt; &lt;code&gt;\usepackage{rotating}&lt;/code&gt; for &lt;code&gt;sidewaystable&lt;/code&gt; and &lt;code&gt;sidewaysfigure&lt;/code&gt; to get tables and figures to fit within margins &lt;/li&gt;
	  &lt;li&gt; &lt;code&gt;\footnotesize&lt;/code&gt; and &lt;code&gt;\tiny&lt;/code&gt; to get tables to fit within margins. The Grad Div is apparently very serious about margins. But they did not complain that the fontsizes were different in different tables, even though I think this is technically against the formatting guidelines.&lt;/li&gt;
	  &lt;li&gt; \centering within each table and figure call to make things look nice &lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt; remove calls to &lt;code&gt;\acknowledgements&lt;/code&gt;, &lt;code&gt;\appendix&lt;/code&gt;, &lt;code&gt;\software&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; put acknowledgements into the front matter, with text clarifying which chapter(s) certain acknowledgements (e.g. funding) apply to &lt;/li&gt;
  &lt;li&gt; Reformat all software citations previously included with &lt;code&gt;\software{}&lt;/code&gt;: find DOIs, make BibTeX entries with doi2bib, include them in bibliography and text using &lt;code&gt;\parencite{}&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; remove special commands to make appendix numbering like A1, A2, etc. &lt;/li&gt;
  &lt;li&gt; Check for places in the text where the margin is violated. This often happens with special text formats like &lt;code&gt;\texttt{}&lt;/code&gt; because LaTex doesn't know how to hyphenate it. To fix these, surround the entire paragraph with &lt;code&gt;\begin{sloppypar}&lt;/code&gt; and &lt;code&gt;\end{sloppypar}&lt;/code&gt; &lt;/li&gt;
  &lt;li&gt; try compiling and see what fails &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage, the document renders successfully and looks pretty good! But the Grad Div gives zero guidelines for how to include published material in the thesis. All they say is &lt;i&gt;“Publishable papers and article-length essays arising from your research project are acceptable only if you incorporate that text into a larger argument that binds together the whole dissertation or thesis. Include introductory, transitional, and concluding sections with the papers or essays.”&lt;/i&gt; …the “only” in that sentence a bit ominous. To meet the bare minimum of that requirement, here are the decisions I made to finish formatting stuff. These ended up getting approved without any issues, although I’m sure you could make different decisions that would also be okay:&lt;/p&gt;
&lt;ul&gt; 
  &lt;li&gt; At the start of each chapter, I put an italicized note saying, &quot;The published version of this chapter was coauthored by the following people, and is included in the thesis with their express permission: &quot; &lt;/li&gt;
  &lt;li&gt; I did actually get email approval from all those people (there is an official way to do this, and the form needs to be submitted like a month before the dissertation deadline. see dissertation filing guidelines) &lt;/li&gt;
  &lt;li&gt; Instead of having a chapter section entitled Abstract, I just put the text of the abstract directly after the italicized list of coauthors without any header. &lt;/li&gt;
  &lt;li&gt; I retained sections of each chapter entitled Introduction and Conclusions. I changed the name of the Introduction chapter of the dissertation to be called Background to avoid confusion. &lt;/li&gt;
  &lt;li&gt; I wanted to keep the appendices of the different chapters within the chapters themselves. To do so, I just changed all the Appendix chapter sections to be regular sections named &quot;Appendix: whatever.&quot; It's an ugly solution and maybe there is a better way, but that's what I went with. I was concerned the Grad Div would make me put them at the end, but they didn't. &lt;/li&gt;
  &lt;li&gt; I ended up writing a reasonably long introductory chapter, which contained primarily grad-level textbook material that was relevant to my different chapters. And even though this initially felt like busywork, it was actually really instructive to do and I'm glad I did it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt; Update 08/15/22 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The dissertation was approved!  I found some problems with the steps I had listed in an earlier version of this blog post, and those have now been changed  to reflect what I actually turned in. I also learned that there’s no reason to stress &lt;i&gt;too&lt;/i&gt; much about formatting, because if there are small formatting issues after the deadline you are allowed to change them, as long as your full committee has approved the dissertation before the deadline.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="Berkeley" /><category term="software" /><summary type="html">This short tutorial documents how I modified an awesome UCB thesis Overleaf template to build my own dissertation. I am not including my own Overleaf document publicly because formatting guidelines from the Grad Div might change over time, and I have no interest in maintaining my own template. But feel free to get in touch and I’ll send it to you. The Berkeley Grad Div’s page on Formatting your Thesis warns, “The most common mistake is following a fellow (or previous) student’s example.” This is horrendous advice, and will lead to every student wasting time dealing with nitpicky formatting guidelines. Thank goodness that LaTex exists, and in particular that Paul Vojta (math professor - never met him) maintains a ucbthesis.cls class file and Overleaf template. So I used that as my starting point. If you work for the Grad Div and somehow happen to see this, please get in touch! It would be awesome if y’all would maintain a good LaTex template for a science thesis, and I’d be happy to advise. I needed to insert astronomy and earth science publications that were written in LaTex but used classfiles from AAS, Icarus, and GRL, and lots of the LaTex commands I used in those publications did not exist in ucbthesis.cls. I added \usepackage{amsmath} and \usepackage{amssymb}, but there were still many commands missing, e.g. arcseconds as \arcsec and journal name shortcuts like \grl. For those, I used latexdefs.tex (link will download!) from some Caltech Astronomy site (unknown author), and put \include{latexdefs} into the preamble of thesis.tex. I changed the way Biblatex was handling citations, too; I used \usepackage[style=authoryear-comp, backend=biber, uniquename=false, uniquelist=true, maxcitenames=1]{biblatex} . I then implemented the following steps to remove/replace formatting from my other publications and convert them into chapters: make a new .tex file for the chapter, and copy everything in there add the chapter name to the list of \include{} calls in thesis.tex remove all calls to begin and end document, remove package imports comment out all authors and affiliations change \title{} to \chapter{} remove calls to \abstract{} copy-paste all references into the references.bib, then delete call to bibliography within chapter change citations: \citet{} becomes \textcite{}, and \citep becomes \parencite[][]{} import all figures into the Figures directory change all the file paths in calls to \includegraphics to point to Figures directory fix tables - no fancytable allowed, but can import other packages. see example tables \usepackage{longtable} for multi-page tables \usepackage{rotating} for sidewaystable and sidewaysfigure to get tables and figures to fit within margins \footnotesize and \tiny to get tables to fit within margins. The Grad Div is apparently very serious about margins. But they did not complain that the fontsizes were different in different tables, even though I think this is technically against the formatting guidelines. \centering within each table and figure call to make things look nice remove calls to \acknowledgements, \appendix, \software put acknowledgements into the front matter, with text clarifying which chapter(s) certain acknowledgements (e.g. funding) apply to Reformat all software citations previously included with \software{}: find DOIs, make BibTeX entries with doi2bib, include them in bibliography and text using \parencite{} remove special commands to make appendix numbering like A1, A2, etc. Check for places in the text where the margin is violated. This often happens with special text formats like \texttt{} because LaTex doesn't know how to hyphenate it. To fix these, surround the entire paragraph with \begin{sloppypar} and \end{sloppypar} try compiling and see what fails At this stage, the document renders successfully and looks pretty good! But the Grad Div gives zero guidelines for how to include published material in the thesis. All they say is “Publishable papers and article-length essays arising from your research project are acceptable only if you incorporate that text into a larger argument that binds together the whole dissertation or thesis. Include introductory, transitional, and concluding sections with the papers or essays.” …the “only” in that sentence a bit ominous. To meet the bare minimum of that requirement, here are the decisions I made to finish formatting stuff. These ended up getting approved without any issues, although I’m sure you could make different decisions that would also be okay: At the start of each chapter, I put an italicized note saying, &quot;The published version of this chapter was coauthored by the following people, and is included in the thesis with their express permission: &quot; I did actually get email approval from all those people (there is an official way to do this, and the form needs to be submitted like a month before the dissertation deadline. see dissertation filing guidelines) Instead of having a chapter section entitled Abstract, I just put the text of the abstract directly after the italicized list of coauthors without any header. I retained sections of each chapter entitled Introduction and Conclusions. I changed the name of the Introduction chapter of the dissertation to be called Background to avoid confusion. I wanted to keep the appendices of the different chapters within the chapters themselves. To do so, I just changed all the Appendix chapter sections to be regular sections named &quot;Appendix: whatever.&quot; It's an ugly solution and maybe there is a better way, but that's what I went with. I was concerned the Grad Div would make me put them at the end, but they didn't. I ended up writing a reasonably long introductory chapter, which contained primarily grad-level textbook material that was relevant to my different chapters. And even though this initially felt like busywork, it was actually really instructive to do and I'm glad I did it. Update 08/15/22 The dissertation was approved! I found some problems with the steps I had listed in an earlier version of this blog post, and those have now been changed to reflect what I actually turned in. I also learned that there’s no reason to stress too much about formatting, because if there are small formatting issues after the deadline you are allowed to change them, as long as your full committee has approved the dissertation before the deadline.</summary></entry><entry><title type="html">Making this website part II</title><link href="http://0.0.0.0:4000/tutorials/website-build-ii/" rel="alternate" type="text/html" title="Making this website part II" /><published>2021-11-30T00:00:00+00:00</published><updated>2021-11-30T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/website-build-ii</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/website-build-ii/">&lt;p&gt;This is part two of my website build using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; with the &lt;a href=&quot;https://github.com/mmistakes&quot;&gt;Minimal Mistakes&lt;/a&gt; template and hosted by Github Pages. In the &lt;a href=&quot;http://0.0.0.0:4000/tutorials/website-build&quot;&gt;previous edition&lt;/a&gt; I was able to get something reasonable up and running using the Minimal Mistakes &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter/generate&quot;&gt;quickstart&lt;/a&gt;. The goals here are to (1) use Docker to make a local copy of the website so I don’t have to git push every time I want to test a change, and (2) to change some Minimal Mistakes defaults to personalize the site’s look. The repo that underlies the website is &lt;a href=&quot;https://github.com/emolter/emolter.github.io&quot;&gt;here&lt;/a&gt;. In this post I’m basically following Katerina Bosko’s &lt;a href=&quot;https://www.cross-validated.com/Personal-website-with-Minimal-Mistakes-Jekyll-Theme-HOWTO-Part-I/&quot;&gt;very nice tutorial&lt;/a&gt; parts I and II, with the twist that I’ll try to make as few changes as possible from the quickstart site.&lt;/p&gt;

&lt;h1 id=&quot;locally-serving-the-website-using-docker&quot;&gt;Locally serving the website using Docker&lt;/h1&gt;

&lt;p&gt;A &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container is used to run the virtual environment where the local version of the website lives. Installing Docker was super easy: I just downloaded the disk image and dragged it to the Applications folder, and the command-line tools worked automagically (&lt;code&gt;which docker&lt;/code&gt; pointed to the correct path with no extra steps needed).  Going through the Docker tutorial was helpful. One lesson was that if you try to initialize a container on a port that’s in use, the container will fail to run (of course), but Docker will still allocate a container name and ID that must be deleted before remaking it. You can see a list of containers with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker ps -aq&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and remove all of them with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker rm -f $(docker ps -aq)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once Docker was installed, I followed Katerina Bosko’s tutorial Part I exactly, replacing instances of &lt;code&gt;/usr/src/app&lt;/code&gt; with the path to the directory where my site sits (e.g. &lt;code&gt;/Users/emolter/emolter.github.io/&lt;/code&gt;). Since I was starting with an already-functional website based on the quickstart instead of with a clone of the full Minimal Mistakes site, I also had to copy &lt;code&gt;minimal-mistakes-jekyll.gemspec&lt;/code&gt; into the directory to make everything work.&lt;/p&gt;

&lt;p&gt;As advertised, I can now instantly see any changes I make to the site upon refreshing &lt;code&gt;http://0.0.0.0:4000/&lt;/code&gt;. To make changes to any of the .yml files, it’s necessary to rerun the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;docker build -t personal-website .
docker run --volume=&quot;$PWD:/Users/emolter/emolter.github.io&quot; -p 4000:4000 -t personal-website&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;styling-on-em&quot;&gt;Styling on em&lt;/h1&gt;

&lt;p&gt;The Minimal Mistakes quickstart is nice because it makes a pared-down version of the site that does not include any of the style files, which makes it user-friendly for a newbie like me. I’m not quite sure how this works, but apparently just setting &lt;code&gt;remote_theme: mmistakes/minimal-mistakes&lt;/code&gt; in your &lt;code&gt;config.yml&lt;/code&gt; file means Jekyll/Github Pages will find all the style files remotely. But now I want to make changes to that remote theme.  Importantly, if style files are included inside a site with a remote theme, then Jekyll will look inside the site first and override the remote theme defaults. So making changes is as simple as copying the relevant style file from the Minimal Mistakes base repository into your site and then changing whatever you want. Just make sure to preserve the directory structure (e.g., use &lt;code&gt;_sass/minimal-mistakes/_sidebar.scss&lt;/code&gt; to change the sidebar.)&lt;/p&gt;

&lt;p&gt;I liked the way the sidebar looks on Katerina Bosko’s site with the larger picture, so I did indeed copy over &lt;code&gt;_sass/minimal-mistakes/_sidebar.scss&lt;/code&gt;. For anything within sass, I also learned it is necessary to copy &lt;code&gt;_sass/minimal_mistakes.scss&lt;/code&gt; or else your changes won’t be seen.&lt;/p&gt;

&lt;p&gt;I didn’t make any more changes because the defaults look good enough for me, but the proof-of-concept is there and any changes I want to make later should be easy.&lt;/p&gt;

&lt;h1 id=&quot;pushing-changes-to-github&quot;&gt;Pushing changes to GitHub&lt;/h1&gt;

&lt;p&gt;I was initially concerned that all these changes to the GitHub repo would mess up the way the real site at &lt;code&gt;emolter.github.io&lt;/code&gt; behaves. Apparently running the naive&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;git add -A
git commit -m &quot;whatever&quot;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;doesn’t break anything, and correctly updates content within existing pages as well as including new blog posts or pages, but does not incorporate the style changes I made.&lt;/p&gt;

&lt;p&gt;The solution is simply to remove &lt;code&gt;_site&lt;/code&gt; from &lt;code&gt;.gitignore&lt;/code&gt;, then do the usual git push.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="website" /><category term="jekyll" /><summary type="html">This is part two of my website build using Jekyll with the Minimal Mistakes template and hosted by Github Pages. In the previous edition I was able to get something reasonable up and running using the Minimal Mistakes quickstart. The goals here are to (1) use Docker to make a local copy of the website so I don’t have to git push every time I want to test a change, and (2) to change some Minimal Mistakes defaults to personalize the site’s look. The repo that underlies the website is here. In this post I’m basically following Katerina Bosko’s very nice tutorial parts I and II, with the twist that I’ll try to make as few changes as possible from the quickstart site. Locally serving the website using Docker A Docker container is used to run the virtual environment where the local version of the website lives. Installing Docker was super easy: I just downloaded the disk image and dragged it to the Applications folder, and the command-line tools worked automagically (which docker pointed to the correct path with no extra steps needed). Going through the Docker tutorial was helpful. One lesson was that if you try to initialize a container on a port that’s in use, the container will fail to run (of course), but Docker will still allocate a container name and ID that must be deleted before remaking it. You can see a list of containers with docker ps -aq and remove all of them with docker rm -f $(docker ps -aq) Once Docker was installed, I followed Katerina Bosko’s tutorial Part I exactly, replacing instances of /usr/src/app with the path to the directory where my site sits (e.g. /Users/emolter/emolter.github.io/). Since I was starting with an already-functional website based on the quickstart instead of with a clone of the full Minimal Mistakes site, I also had to copy minimal-mistakes-jekyll.gemspec into the directory to make everything work. As advertised, I can now instantly see any changes I make to the site upon refreshing http://0.0.0.0:4000/. To make changes to any of the .yml files, it’s necessary to rerun the following lines: docker build -t personal-website . docker run --volume=&quot;$PWD:/Users/emolter/emolter.github.io&quot; -p 4000:4000 -t personal-website</summary></entry><entry><title type="html">Making this website</title><link href="http://0.0.0.0:4000/tutorials/website-build/" rel="alternate" type="text/html" title="Making this website" /><published>2021-11-18T00:00:00+00:00</published><updated>2021-11-18T00:00:00+00:00</updated><id>http://0.0.0.0:4000/tutorials/website-build</id><content type="html" xml:base="http://0.0.0.0:4000/tutorials/website-build/">&lt;p&gt;I here document how I made this website and what I learned. I hope this post helps someone else make their github.io site for the first time, or just reminds me in a few months what I did.  Thanks to Murti for pointing out that I can host a website on github.io this way. In order to have it at username.github.io you just need to name the repo precisely “username.github.io”. Making my site here instead of at a berkeley.edu address seems like the best decision for someone who might change research positions a few times in the next few years. The repo that underlies the website is &lt;a href=&quot;https://github.com/emolter/emolter.github.io&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update 11/30:&lt;/b&gt; I’d highly recommend setting up a Docker environment to host a local copy of the site before you start editing. That way, you can test changes before pushing them to the repo. You can learn how in &lt;a href=&quot;http://0.0.0.0:4000/tutorials/website-build-ii&quot;&gt;Part II of this tutorial&lt;/a&gt;. Although it should have been in Part I, I didn’t figure out how to do it until just now.&lt;/p&gt;

&lt;h1 id=&quot;software-prerequisites&quot;&gt;Software prerequisites&lt;/h1&gt;

&lt;p&gt;GitHub supports building websites using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Jekyll was easy to install with just&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;once I had installed the appropriate Ruby versions. Ruby was the hard part, as it seems pretty annoying to install without homebrew and the version on my Mac was outdated (need at least 2.5). I used the rbenv ruby environment handler, and had to install it by hand via &lt;a href=&quot;https://github.com/rbenv/rbenv#basic-github-checkout&quot;&gt;these instructions&lt;/a&gt; because I don’t use homebrew. Once that was done, I was able to just run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rbenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;the-minimal-mistakes-template&quot;&gt;The Minimal Mistakes template&lt;/h1&gt;

&lt;p&gt;Now I needed a Jekyll template since the default from GitHub Pages seemed a bit simplistic. &lt;a href=&quot;https://github.com/mmistakes&quot;&gt;Minimal Mistakes&lt;/a&gt; came through bigtime. I spent a long time trying to use a different free Jekyll template, but its homepage was kind of dumb-looking and I couldn’t figure out easily how to change it. The fact that Minimal Mistakes had a &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter/generate&quot;&gt;quickstart&lt;/a&gt; that made the GitHub repo for me was pretty awesome. All I did was take that, git clone it to my local machine, and start making changes! Then I just git commit as normal. It takes a few minutes for the site to update after the GitHub repo updates. It looks easy to change any layouts or settings by simply copying relevant layout or style files from the main Minimal Mistakes repo into my local repo (the local repo’s version overrides the defaults), but I didn’t try that yet.&lt;/p&gt;

&lt;p&gt;I initially wanted to make use of the categorization and tagging functionality to separate research, teaching, outreach, etc., and just make one post per topic.  But I couldn’t easily figure out how to make Research, Teaching, and Outreach into site headers as well as blog categories.  I’m sure there is a way to do this, but I found it easier to just remove the fancy, auto-sorting Categories and Tags pages and make new pages with the “simple” layout.  I guess the outcome is fine - this isn’t really a blog anyway - but the search function is pretty limited as it seems to only see blog posts.&lt;/p&gt;

&lt;p&gt;I wanted to change the homepage to be something other than the blog posts, since this is mainly a professional website. Minimal Mistakes already had that solved, too: they provide a splash page layout &lt;a href=&quot;https://raw.githubusercontent.com/mmistakes/minimal-mistakes/master/docs/_pages/home.md&quot;&gt;here&lt;/a&gt;. To use this, I put it in _pages/home.md, then deleted index.html in the root directory. I really enjoy that the homepage is primarily photos, but one could also make a home.md with the “simple” layout or whatever.&lt;/p&gt;

&lt;h1 id=&quot;font-awesome&quot;&gt;Font Awesome&lt;/h1&gt;

&lt;p&gt;I didn’t know this existed until there was an example in Minimal Mistakes, but &lt;a href=&quot;https://fontawesome.com/v5.15/icons?d=gallery&amp;amp;p=2&amp;amp;m=free&quot;&gt;Font Awesome&lt;/a&gt; is really helpful for making little thumbnails. You should see where these go in the _config.yml file; the base Minimal Mistakes template is already using them. It is important to remember that there are several subclasses, including business (fab) and solid (fas), e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;icon: &quot;fas fa-fw fa-envelope&quot;
icon: &quot;fab fa-fw fa-orcid&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It doesn’t look like ADS has a Font Awesome icon, so I just picked a random one.  But these really go a long way toward making things look professional.&lt;/p&gt;</content><author><name>Edward M. (Ned) Molter</name></author><category term="Tutorials" /><category term="website" /><category term="jekyll" /><summary type="html">I here document how I made this website and what I learned. I hope this post helps someone else make their github.io site for the first time, or just reminds me in a few months what I did. Thanks to Murti for pointing out that I can host a website on github.io this way. In order to have it at username.github.io you just need to name the repo precisely “username.github.io”. Making my site here instead of at a berkeley.edu address seems like the best decision for someone who might change research positions a few times in the next few years. The repo that underlies the website is here. Update 11/30: I’d highly recommend setting up a Docker environment to host a local copy of the site before you start editing. That way, you can test changes before pushing them to the repo. You can learn how in Part II of this tutorial. Although it should have been in Part I, I didn’t figure out how to do it until just now. Software prerequisites GitHub supports building websites using Jekyll. Jekyll was easy to install with just gem install jekyll bundler once I had installed the appropriate Ruby versions. Ruby was the hard part, as it seems pretty annoying to install without homebrew and the version on my Mac was outdated (need at least 2.5). I used the rbenv ruby environment handler, and had to install it by hand via these instructions because I don’t use homebrew. Once that was done, I was able to just run rbenv install 2.7.4</summary></entry></feed>